Shell Script:

example...
#!/bin/bash
# Author: Your Name your.login@imperial.ac.uk
# Script: boilerplate.sh
# Desc: simple boilerplate for shell scripts
# Arguments: none
# Date: Oct 2019

echo -e "\nThis is a shell script! \n" #what does -e do?

#exit


The .sh extension is not necessary, but useful for you and your programing IDE (e.g., Visual Studio Code, Emacs, etc) to identifying the file type.


    The first line is a “shebang” (or sha-bang or hashbang or pound-bang or hash-exclam or hash-pling! – Wikipedia). It can also can be written as #!/bin/sh. It tells the bash interpreter that this is a bash script and that it should be interpreted and run as such.

    The hash marks in the following lines tell the interpreter that it should ignore the lines following them (that’s how you put in script documentation (who wrote the script and when, what the script does, etc.) and comments on particular line of script.

    Note that there is a commented out exit command at the end of the script. Uncommenting it will not change the behavior of the script, but will allow you to generate a error code, and if the command is inserted in the middle of the script, to stop the code at that point. To find out more, see this and this in particular.



Run it with: bash [file].sh #if the script is does something specific in a given project.
or:
chmod +x myscript.sh
myscript.sh
Use this second approach for a script that does something generic, and is likely to be reused again and again (like a compiler)

stick with relative paths! quicker, doesnt give away your path to others, and more resilient



There are three ways to assign values to variables (note lack of spaces!):

    Explicit declaration: MYVAR=myvalue

    Reading from the user: read MYVAR

    Command substitution: MYVAR=\$( (ls | wc -l) )
w
