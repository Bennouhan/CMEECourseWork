Starting weekly feedback for Ben, Week1

Current Points = 100

Note that: 
(1) Major sections begin with a double "====" line 
(2) Subsections begin with a single "====" line 
(3) Code output or text file content are printed within single "*****" lines 

======================================================================
======================================================================
Your Git repo size this week is about 3.60 MiB on disk 

PART 1: Checking project workflow...

Found the following directories in parent directory: week2, week3, .git, week1, week4, Feedback, week5

Found the following files in parent directory: README.txt, .gitignore

Checking for key files in parent directory...

Found .gitignore in parent directory, great! 

Printing contents of .gitignore:

**********************************************************************
# ALWAYS ADD TO BOTTOM! The exe and bin files addition below requires such.
# use this periodically to add all files > 100mb: find . -size +100M | cat >> ~/cmeecoursework/.gitignore

# all log files, executables and temp files will be ignored when comitting all 
*~ 
*.tmp

# temporary files which can be created if a process still has a handle open of a deleted file
.fuse_hidden*

# KDE directory preferences
.directory

# Linux trash folder which might appear on any partition or disk
.Trash-*

# .nfs files are created when an open file is removed but is still being accessed
.nfs*

# executable files and other binary files without an extension
*.exe
*
!/**/
!*.*

# graphic files
*.jpg
*.jpeg
*.jpe
*.jif
*.jfif
*.jfi
*.jp2
*.j2k
*.jpf
*.jpx
*.jpm
*.mj2
*.jxr
*.hdp
*.wdp
*.gif
*.raw
*.webp
*.png
*.apng
*.mng
*.tiff
*.tif
*.svg
*.svgz
*.xbm
*.bmp
*.dib
*.ico
*.3dm
*.max

*.mp3
*.aac
*.he-aac
*.ac3
*.eac3
*.wma
*.pcm

*.mp4
*.m4a
*.m4v
*.mov
*.3gp
*.ogg
*.wmv
*.webm
*.flv
*.avi
*.hdv
*.mxf
*.wav
*.vob

# .idea file for pycharm when cmeecoursework set as the project directory
.idea

# all sandbox directories, notes, misc
sandbox/
.note
notes/
/home/bennouhan/cmeecoursework/misc/

# unwanted latex outputs
.bbl
.blg

# unwanted python objects
__pycache__
.log

# don't ignore .gitignore
!.gitignore

**********************************************************************

Found README in parent directory, named: README.txt

Printing contents of README.txt:

**********************************************************************
____________________________________________________

----------------------------------------------------


MASTER CMEE COURSEWORK DIRECTORY

Author: Ben Nouhan


----------------------------------------------------
____________________________________________________




 * Description

 * Directories list
  


----------------------
----------------------
DESCRIPTION
----------------------



This is the master directory for all of my assessed coursework from the CMEE course at Silwood Campus, Imperial College London. 


Work from the course is catagorised by contiguous week of the course, from week 1 (starting 05/10/2020) to week 11.


Please see the README file for a given week in its correspondingly-named directory for (much) more detail.



----------------------
----------------------
DIRECTORIES LIST
----------------------



//////////
    WEEK 1
//////////


Topics covered this week include introductions to:

 - Use of UNIX and Linux operating systems
 
 - Shell scripting 

 - Version control with Git 
 
 - Creating scientific documents with LaTeX












**********************************************************************

======================================================================
Looking for the weekly directories...

Found 5 weekly directories: week1, week2, week3, week4, week5

The Week1 directory will be assessed 

======================================================================
======================================================================
PART 2: Checking weekly code and workflow...

======================================================================
Assessing WEEK1...

Found the following directories: data, code, results

Found the following files: README.txt

Checking for readme file in weekly directory...

Found README in parent directory, named: README.txt

Printing contents of README.txt:

**********************************************************************
____________________________________________________

----------------------------------------------------


CMEE COURSEWORK WEEK 1

Author: Ben Nouhan


----------------------------------------------------
____________________________________________________





 * Description

 * Files list
  
 * Requirements
 
 * Contributions
 
 * Credits



----------------------
----------------------
DESCRIPTION
----------------------


This is all the assessed coursework from Week 1 (5th Oct - 11th Oct 2020) of the CMEE course at Silwood Campus, Imperial College London. 

All work was done through VSCode on a system running Ubuntu 20.04, and is explained in further details in The Multilingual Quantitative Biologist book (link below).

Topics covered this week include introductions to:

 - Use of UNIX and Linux operating systems
 
 - Shell scripting 

 - Version control with Git 
 
 - Creating scientific documents with LaTeX



----------------------
----------------------
FILES LIST
----------------------


//////////
      CODE
//////////


boilerplate.sh - Example script to print out simple statement

FirstExample.tex - Example LaTeX file

tabtocsv.sh - Substitutes tabs with commas; Saves output into a .csv file in results/

variables.sh - Repeats a user-input string; returns the sum of two user-input numbers

tiff2png.sh - Converts a .tif file in working directory to a .png

CountLines.sh - Returns the number of lines of a file

FirstBiblio.bib - Example citation for use in LaTeX files

CompileLaTeX.sh - Compiles a .tex file into a new pdf document in data/

csvtospace.sh - Substitutes commas with spaces; Saves output into a .ssv file in results/

ConcatenateTwoFiles.sh - Creates a third, new file in results/ with the content of the second file appended to content of the first

MyExampleScript.sh - Greets the user, repeats greeting

UnixPrac1.txt - Contains 5 terminal commands for the following analyses on FASTA files: 
  1. Count how many lines there are
  2. Print everything starting from the second line for the E. coli genome
  3. Count the sequence length of the E. coli genome
  4. Count the matches of a particular sequence, “ATGC” in the E. coli genome
  5. Compute the AT/GC ratio of the E. coli genome
                  


//////////
      DATA
//////////


spawannxs.txt - Text file containing list of species of marine and coastal flora 
protected under UN article 11(1)(a), used to practice command line functions

/fasta/*.fasta - FASTA files used for analysis with UnixPrac1.txt commands

/Temperature/180*.csv - CSV files used to test conversion using csvtospace.sh script



//////////
   RESULTS
//////////


1800.ssv - Output of csvtospace.sh script

abomination.txt - Output of ConcatenateTwoFiles.sh script

FirstExample.pdf - Output of CompileLaTeX.sh script

test.csv - Output of tabtocsv.sh script
 


----------------------
----------------------
REQUIREMENTS
----------------------


List of all modules etc required to run every script in this project:

bc                              - GNU bc arbitrary precision calculator lang
grep                            - GNU grep, egrep and fgrep
perl                            - Larry Wall's Practical Extraction and Repo
perl-modules-5.30               - Core Perl modules                     
imagemagick                     - image manipulation programs -- binaries   
    


----------------------
----------------------
CONTRIBUTIONS
----------------------


I am not currently looking for contributions, but feel free to send me any suggestions related to the project at b.nouhan.20@imperial.ac.uk



----------------------
----------------------
CREDITS
----------------------


This project was (almost exclusively) inspired by The Multilingual Quantitative Biologist book (https://mhasoba.github.io/TheMulQuaBio/intro.html). Special thanks to Dr Samraat Pawar, Pok Ho and Francis Windram for their help.



----------------------------------------------------
____________________________________________________


**********************************************************************

Found following files in results directory: 1800.ssv, test.csv, FirstExample.pdf, abomination.txt...

Ideally, Results directory should be empty other than, perhaps a .gitkeep. 

 0.5 pts deducted per results file 

Current Points = 98.0

Found 12 code files: ConcatenateTwoFiles.sh, tiff2png.sh, UnixPrac1.txt, variables.sh, CountLines.sh, FirstBiblio.bib, csvtospace.sh, CompileLaTeX.sh, boilerplate.sh, FirstExample.tex, tabtocsv.sh, MyExampleScript.sh

======================================================================
Testing script/code files...

======================================================================
Inspecting script file ConcatenateTwoFiles.sh...

File contents are:

**********************************************************************
#!/bin/bash
# Author: Ben Nouhan, bjn20@ucl.ac.uk
# Script: ConcatenateTwoFiles.sh
# Desc: Creates a third, new file in results/ with the content of the second file appended to content of the first
# Arguments: 1 -> text file, 2 -> text file, 3 -> new text file
# Date: 12 Oct 2020

### request one argument from user if no. of arguments entered =/= 1
if [ $# -ne 3 ]; then
#if no. arguments =/= 3
    echo "Please enter three arguments: two text files to concatenate, then one new destination file"
    exit
elif ! [ -s $1 ] || ! [ -f $1 ] || ! [ -s $2 ] || ! [ -f $2 ]; then
#if files 1 or 2 do not have content or does not exist
    echo "File 1 &/or 2 are empty or do not exist, please try again"
    exit
elif [ -f ../results/$3 ]; then
#if file 3 already exists, ask before overwriting
    echo "File already exists, are you sure you wish to overwrite?"
    read -r -p "Are you sure? [y/N] " response
    if ! [[ "$response" =~ ^([yY][eE][sS]|[yY])$ ]]
    #if response is anything but y, Y, yes (etc), abort
    then
        echo "Operation aborted. Please try again with a new file name"
        exit
    fi
fi

### concatenates the files
cat $1 > $3
#creates new file, 3, with same content as 1
cat $2 >> $3
#appends content of 2
echo -e "\nContent of merged File ($3) is:\n\n\n"
cat $3
#returns content of new file
echo -e "\n\n\n\nMoving $3 to the results directory..."
mv $3 ../results
echo "Done!"
#moves $3 to results
**********************************************************************

Testing ConcatenateTwoFiles.sh...

Output (only first 500 characters): 


**********************************************************************
Please enter three arguments: two text files to concatenate, then one new destination file

**********************************************************************

Code ran without errors

Time consumed = 0.00407s

======================================================================
Inspecting script file tiff2png.sh...

File contents are:

**********************************************************************
#!/bin/bash
# Author: Ben Nouhan, bjn20@ucl.ac.uk
# Script: tiff2png.sh
# Desc: Converts all .tif files in working dir, or a dir specified by argument, to a .png in same dir
# Dependencies: imagemagick
# Arguments: 1 -> directory containing .tif file(s), or none (working directory is default)
# Date: 13 Oct 2020

### rejects more than 1 argument
if [ $# -gt 1 ]; then
#if no. arguments =/= 1
  echo "Please enter one argument; a directory containing .tif file(s)"
  exit
fi

### if no argument, sets working directory as argument
if [ $# -eq 0 ]; then
    set -- $1 $PWD/
fi

### searches argued directory for .tif, converts them all
if [ -f $1/*.tif ]; then
#checks for .tif files in directory
    #could make a .png subdirectory here if you wanted to
    for f in $1/*.tif
    do  
        echo "Converting $f" 
        convert "$f"  "$1/$(basename "$f" .tif).jpg"
        #and move these to subdirectory here. may be excessice though
    done
else
    echo "There is no .tif file in this directory"
    #states if no .tif present in argued (or working) directory
    exit
fi
exit
**********************************************************************

Testing tiff2png.sh...

Output (only first 500 characters): 


**********************************************************************
There is no .tif file in this directory

**********************************************************************

Code ran without errors

Time consumed = 0.00420s

======================================================================
Inspecting script file UnixPrac1.txt...

File contents are:

**********************************************************************
# Q1
wc -l ../data/fasta/*.fasta
# Q2
tail -n +2 ../data/fasta/E.coli.fasta
# Q3
tail -n +2 ../data/fasta/E.coli.fasta | wc -c
# Q4
tail -n +2 ../data/fasta/E.coli.fasta | tr -d "\n" | grep -oi atgc | wc -l
# Q5
fGC=$(tail -n +2 ../data/fasta/E.coli.fasta | tr -d "\n" | grep -io "t\|a" | wc -l) && fTA=$(tail -n +2 ../data/fasta/E.coli.fasta | tr -d "\n" | grep -io "c\|g" | wc -l) && echo $fGC/$fTA | bc -l

**********************************************************************

Testing UnixPrac1.txt...

======================================================================
Inspecting script file variables.sh...

File contents are:

**********************************************************************
#!/bin/bash
# Author: Ben Nouhan, bjn20@ucl.ac.uk
# Script: variables.sh
# Desc: Repeats a user-input string; returns the sum of two user-input numbers
# Arguments: -
# Date: 12 Oct 2020

### Shows the use of variables
MyVar='some string'
echo 'the current value of the variable is:' $MyVar
echo 'Please enter a new string'
while true; do
    read MyVar
    # request input from user if blank
    if [ -z "$MyVar" ]; then
    #checks for blank input
        echo "No string entered. Please enter a new string"
    else
        break
    fi
done
echo 'the current value of the variable is:' $MyVar

### Reading multiple values, handling errors
echo 'Enter two itegers separated by space(s)'
while true; do
    #numb='^[0-9]+$'
    read a b c
    #user inputs variables; including c absorbs any extra inputs without error
    if [[ $((a)) != $a ]] || [[ $((b)) != $b ]]; then
    #checks that both a and b equal themselves arithmetically - ie they're both numbers
        echo "Error: please enter two integers separated by space(s)"
    else
        break
    fi
done

mysum=$(echo -e  $a + $b | bc -l)
#adds a and b, even if decimals (decimals will compute but with an error)
echo -e 'You entered' $a 'and' $b ' \nTheir sum is' $mysum
exit
**********************************************************************

Testing variables.sh...

Output (only first 500 characters): 


**********************************************************************
the current value of the variable is: some string
Please enter a new string
No string entered. Please enter a new string
No string entered. Please enter a new string
No string entered. Please enter a new string
No string entered. Please enter a new string
No string entered. Please enter a new string
No string entered. Please enter a new string
No string entered. Please enter a new string
No string entered. Please enter a new string
No string entered. Please enter a new string
No string entered. P
**********************************************************************

Code ran without errors

Time consumed = 10.06198s

======================================================================
Inspecting script file CountLines.sh...

File contents are:

**********************************************************************
#!/bin/bash
# Author: Ben Nouhan, bjn20@ucl.ac.uk
# Script: Countlines.sh
# Desc: Returns the number of lines of a file
# Arguments: 1 -> text file
# Date: 13 Oct 2020

### request one argument from user if no. of arguments entered =/= 1
if [ $# -ne 1 ]; then
#if no. arguments =/= 1
  echo "Please enter one file name as an argument for its lines to be counted"
  exit
elif ! [ -s $1 ] || ! [ -f $1 ]; then
#if file does not have content or does not exist
  echo "File is empty or does not exist, please try again"
  exit
fi

NumLines=`wc -l < $1`
echo "The file $1 has $NumLines lines"
echo
#The < redirects the contents of the file to the stdin (standard input) of the command wc -l. It is needed here because without it, you would not be able to catch just the numerical output (number of lines). To see this, try deleting < from the script and see what the output looks like (it will also print the script name, which you do not want).

**********************************************************************

Testing CountLines.sh...

Output (only first 500 characters): 


**********************************************************************
Please enter one file name as an argument for its lines to be counted

**********************************************************************

Code ran without errors

Time consumed = 0.00974s

======================================================================
Inspecting script file FirstBiblio.bib...

File contents are:

**********************************************************************
@article{einstein1905does,
  title={Does the inertia of a body depend upon its energy-content},
  author={Einstein, Albert},
  journal={Ann Phys},
  volume={18},
  pages={639--641},
  year={1905}
}

**********************************************************************

Testing FirstBiblio.bib...

======================================================================
Inspecting script file csvtospace.sh...

File contents are:

**********************************************************************
#!/bin/bash
# Author: Ben Nouhan, bjn20@ucl.ac.uk
# Script: csvtospace.sh
# Desc: Substitutes commas with spaces; Saves output into a .ssv file in results/
# Arguments: 1 -> csv file (but really any text file with >= 1 commas)
# Date: 14 Oct 2020

### request one argument from user if no. of arguments entered =/= 1
if [ $# -ne 1 ]; then
#if no. arguments =/= 1
  echo "Please enter one argument; a comma-separated values file"
  exit
elif ! [ -s $1 ] || ! [ -f $1 ]; then
#if file does not have content or does not exist
  echo "File is empty or does not exist, please enter a comma-separated values file"
  exit
fi

### inform user if argument is definitely not a csv file
num_tab=$(cat $1 | grep -o "," | wc -l)
#set variable for number of commas in file          
if [ $num_tab -lt 1 ]; then
# if number of commas < 1
  echo "Please enter a comma-separated values file"
  exit
fi

### checks if what will be the resulting file already exists, asks to overwrite
Base=$(echo -e $(basename $1) | cut -d'.' -f1)
#removes extension; returns full name if no "."
#$(basename $1) used, else any dots in path eg ".." in "../dir" will be cut instead
if [ -f ../results/$Base.ssv ]; then
#checks for presence of file which would be overwritten. path added back, after removed for cutting
  echo "File already exists, are you sure you wish to overwrite?"
  read -r -p "Are you sure? [y/N] " response
  if ! [[ "$response" =~ ^([yY][eE][sS]|[yY])$ ]]
  #if response is anything but y, Y, yes (etc), abort
    then
      echo "Operation aborted. Please try again with a new file name"
      exit
  fi
fi

### gets file content; swaps 1=< adjacent commas for a space; saves as new file, replacing any extension with .ssv
echo "Creating a space-delimited version of $1 in results/ ..."
cat $1 | tr -s "," " " > "../results/$Base.ssv"
#identifies basename, saves with new extension. Different methos than above, useful to know. 
echo "Done!"
exit
**********************************************************************

Testing csvtospace.sh...

Output (only first 500 characters): 


**********************************************************************
Please enter one argument; a comma-separated values file

**********************************************************************

Code ran without errors

Time consumed = 0.01271s

======================================================================
Inspecting script file CompileLaTeX.sh...

File contents are:

**********************************************************************
#!/bin/bash
# Author: Ben Nouhan, bjn20@ucl.ac.uk
# Script: CompileLaTeX.sh
# Desc: Compiles a .tex file into a new pdf document in data/
# Arguments: 1 -> .tex file
# Date: 15 Oct 2020


### request one argument from user if no. of arguments entered =/= 1
if [ $# -ne 1 ]; then
#if no. arguments =/= 1
  echo "Please enter one argument; a .tex file to be converted to pdf"
  exit
elif ! [ -s $1 ] || ! [ -f $1 ]; then
#if file does not have content or does not exist
  echo "File is empty or does not exist, please enter a .tex file to be converted to pdf"
  exit
fi

### conversion to pdf
Base=$(echo -e $(basename $1) | cut -d'.' -f1)
#allows argument to be latex file ending .tex or no/different extension
pdflatex $(dirname $1)/$Base.tex
pdflatex $(dirname $1)/$Base.tex
bibtex $(dirname $1)/$Base
pdflatex $(dirname $1)/$Base.tex
pdflatex $(dirname $1)/$Base.tex

### Cleanup
rm *~
rm *.aux
rm *.dvi
rm *.log
rm *.nav
rm *.out
rm *.snm
rm *.toc
rm *.blg
rm *.bbl

### move to data directory, opens from there
echo -e "\n\n\n\nMoving $Base.pdf to results directory and opening..."
mv $Base.pdf ../results
evince ../results/$Base.pdf &
echo "Done!"
**********************************************************************

Testing CompileLaTeX.sh...

Output (only first 500 characters): 


**********************************************************************
Please enter one argument; a .tex file to be converted to pdf

**********************************************************************

Code ran without errors

Time consumed = 0.00976s

======================================================================
Inspecting script file boilerplate.sh...

File contents are:

**********************************************************************
#!/bin/bash
# Author: Ben Nouhan, bjn20@ucl.ac.uk
# Script: boilerplate.sh
# Desc: Example script to print out simple statement
# Arguments: -
# Date: 12 Oct 2020

echo -e "\nThis is a shell script! \n"
# -e allows it to interpret \n despits being between inverted commas. Would take it literally otherwise. same as \t etc


**********************************************************************

Testing boilerplate.sh...

Output (only first 500 characters): 


**********************************************************************

This is a shell script! 


**********************************************************************

Code ran without errors

Time consumed = 0.00918s

======================================================================
Inspecting script file FirstExample.tex...

File contents are:

**********************************************************************
\documentclass[12pt]{article}

\title{A Simple Document}

\author{Your Name}

\date{}

\begin{document}
  \maketitle
  
  \begin{abstract}
    This paper must be cool!
  \end{abstract}
  
  \section{Introduction}
    Blah Blah!
  
  \section{Materials \& Methods}
  One of the most famous equations is:
  \begin{equation}
    E = mc^2
  \end{equation}
  This equation was first proposed by Einstein in 1905 
  \cite{einstein1905does}.
  
  \bibliographystyle{plain}
  \bibliography{FirstBiblio}
\end{document}
**********************************************************************

Testing FirstExample.tex...

======================================================================
Inspecting script file tabtocsv.sh...

File contents are:

**********************************************************************
#!/bin/bash
# Author: Ben Nouhan, bjn20@ucl.ac.uk
# Script: tabtocsv.sh
# Desc: Substitutes tabs with commas; Saves output into a .csv file in results/
# Arguments: 1 -> tab-delimited file (but really any text file with >= 1 tabs)
# Date: 12 Oct 2020

### request one argument from user if no. of arguments entered =/= 1
if [ $# -ne 1 ]; then
#if no. arguments =/= 1
  echo "Please enter one argument; a tab-delimited file"
  exit
elif ! [ -s $1 ] || ! [ -f $1 ]; then
#if file does not have content or does not exist
  echo "File is empty or does not exist, please enter a tab-delimited file"
  exit
fi

### inform user if argument is not a tab-delimited file
num_tab=$(cat $1 | grep -oP "\t" | wc -l)
#set variable for number of tabs in file           #ignore#  num_ext=$(basename $1 | grep -o "\." | wc -l) (set variable for number of periods in filename) ###
if [ $num_tab -lt 1 ]; then
# if number of tabs < 1
  echo "Please enter a tab-delimited file"
  exit
fi

### checks if what will be the resulting file already exists, asks to overwrite
Base=$(echo -e $(basename $1) | cut -d'.' -f1)
#removes extension; returns full name if no "."
#$(basename $1) used, else any dots in path eg ".." in "../dir" will be cut instead
if [ -f ../results/$Base.csv ]; then
#checks for presence of file which would be overwritten. path added back, after removed for cutting
  echo "File already exists, are you sure you wish to overwrite?"
  read -r -p "Are you sure? [y/N] " response
  if ! [[ "$response" =~ ^([yY][eE][sS]|[yY])$ ]]
  #if response is anything but y, Y, yes (etc), abort
    then
      echo "Operation aborted. Please try again with a new file name"
      exit
  fi
fi

### gets file content; swaps tabs for commas; saves as new file, replacing any extension with .csv
echo "Creating a comma delimited version of $1 in results/ ..."
cat $1 | tr -s "\t" "," > "../results/$Base.csv"
#identifies basename, saves with new extension.     #ignore#  using this is alternative: cut -f 1 -d "."
echo "Done!"
exit

**********************************************************************

Testing tabtocsv.sh...

Output (only first 500 characters): 


**********************************************************************
Please enter one argument; a tab-delimited file

**********************************************************************

Code ran without errors

Time consumed = 0.01301s

======================================================================
Inspecting script file MyExampleScript.sh...

File contents are:

**********************************************************************
#!/bin/bash
# Author: Ben Nouhan, bjn20@ucl.ac.uk
# Script: MyExampleScript.sh
# Desc: Greets the user, repeats greeting
# Arguments: -
# Date: 12 Oct 2020

msg1="Hello"
msg2=$USER
echo "$msg1 $msg2"
echo "Hello $USER"
echo

**********************************************************************

Testing MyExampleScript.sh...

Output (only first 500 characters): 


**********************************************************************
Hello mhasoba
Hello mhasoba


**********************************************************************

Code ran without errors

Time consumed = 0.00834s

======================================================================
======================================================================
Finished running scripts

Ran into 0 errors

======================================================================
======================================================================

FINISHED WEEKLY ASSESSMENT

Current Points for the Week = 98.0

NOTE THAT THESE ARE POINTS, NOT MARKS FOR THE WEEK!